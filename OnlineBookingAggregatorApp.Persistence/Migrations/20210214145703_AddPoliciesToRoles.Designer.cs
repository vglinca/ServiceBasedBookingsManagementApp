// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OnlineBookingAggregatorApp.Persistence.Data;

namespace OnlineBookingAggregatorApp.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210214145703_AddPoliciesToRoles")]
    partial class AddPoliciesToRoles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Booking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("DateFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<long>("SpecialistId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SpecialistId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("AdditionalPhoneNumber")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<long>("ClientCategory")
                        .HasColumnType("bigint")
                        .HasColumnName("ClientCategoryId");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long?>("Gender")
                        .HasColumnType("bigint")
                        .HasColumnName("GenderId");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("ClientCategory");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Gender");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("BusinessType")
                        .HasColumnType("bigint")
                        .HasColumnName("BusinessTypeId");

                    b.Property<long>("CompanyType")
                        .HasColumnType("bigint")
                        .HasColumnName("CompanyTypeId");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("EmployeesSize")
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L)
                        .HasColumnName("EmployeesSizeId");

                    b.Property<string>("LogoPath")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessType");

                    b.HasIndex("CompanyType");

                    b.HasIndex("EmployeesSize");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.CompanyBusinessArea", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("BusinessArea")
                        .HasColumnType("bigint")
                        .HasColumnName("BusinessAreaId");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BusinessArea");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyBusinessAreas");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.PolicyRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("Policy")
                        .HasColumnType("bigint")
                        .HasColumnName("PolicyId");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Policy");

                    b.HasIndex("RoleId");

                    b.ToTable("PolicyRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe88cbd4-7816-4ce7-b093-5f78076373e6"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(1248), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 1L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = new Guid("75bdd9e6-c627-4f9c-a439-54eabcf50498"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(3246), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 1L,
                            RoleId = 2L
                        },
                        new
                        {
                            Id = new Guid("df40bb77-7a3d-41dc-b678-6bff85692503"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(4371), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 2L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = new Guid("d3f517fb-1669-4051-8d58-0484aefdfd43"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(4402), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 2L,
                            RoleId = 2L
                        },
                        new
                        {
                            Id = new Guid("681ef95c-bd4f-4874-90c5-eea5b216d7d5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(4752), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 3L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = new Guid("c5b99129-cd66-4a39-bab7-5d4e078f3663"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(5059), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 4L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = new Guid("14b99acb-176d-4d85-9ea2-765fb48d3640"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(5088), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 4L,
                            RoleId = 3L
                        },
                        new
                        {
                            Id = new Guid("be9bee09-8e0b-453d-96df-00b9bd896001"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(5114), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 4L,
                            RoleId = 2L
                        },
                        new
                        {
                            Id = new Guid("4116bb2f-928e-4c73-8771-1d2d22301cd9"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(5374), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 5L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = new Guid("8bfb8780-94f8-4eee-a86a-2090e55ec490"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(5484), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 5L,
                            RoleId = 2L
                        },
                        new
                        {
                            Id = new Guid("d68ebf9c-b252-4e8a-9bd6-17ba7234fca4"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(5770), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 6L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = new Guid("a416e58d-7f75-4e27-a7c5-19c2f7d266bb"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(5798), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 6L,
                            RoleId = 2L
                        },
                        new
                        {
                            Id = new Guid("facefb2b-5883-49a7-ae86-3e0477b4ca54"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(5824), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 6L,
                            RoleId = 3L
                        },
                        new
                        {
                            Id = new Guid("bf9dd31f-2790-4fc4-91ae-21dbfc894ad0"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(6072), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 7L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = new Guid("a238f33e-b039-47f6-a5f6-aa7050462918"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(6100), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 7L,
                            RoleId = 2L
                        },
                        new
                        {
                            Id = new Guid("cf3aefdd-3cc3-448e-9495-871d56219151"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(6344), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 8L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = new Guid("95366bcf-80aa-4944-a9d4-14bcaa157d08"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(6372), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 8L,
                            RoleId = 2L
                        },
                        new
                        {
                            Id = new Guid("04ee0006-712d-4cf1-b57c-8d8ceab583b7"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(6706), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 9L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = new Guid("147d566e-55a2-4c05-b3df-8bb87f9f9152"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(6735), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 9L,
                            RoleId = 2L
                        },
                        new
                        {
                            Id = new Guid("e240fbfc-e227-4c4c-bd5d-5e61624998a3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(6760), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 9L,
                            RoleId = 3L
                        },
                        new
                        {
                            Id = new Guid("da9ebfea-7ef2-4af2-b4c8-70934e19f1a0"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(7009), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 10L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = new Guid("31ce432a-2527-4119-9bd4-5000d34bfffd"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(7253), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 11L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = new Guid("0a83f98b-d947-451b-8167-6ac2ef47cecc"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(7281), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 11L,
                            RoleId = 2L
                        },
                        new
                        {
                            Id = new Guid("6a5ad867-661f-46b7-89d4-a37081be0c53"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(7557), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 12L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = new Guid("d45c4f51-2203-44fe-8c12-0664242a491f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(7585), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 12L,
                            RoleId = 2L
                        },
                        new
                        {
                            Id = new Guid("2683d2c7-90c8-421d-843b-43ecb6cd1656"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(7611), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 12L,
                            RoleId = 3L
                        },
                        new
                        {
                            Id = new Guid("d190356a-c161-4984-b823-c047e13ac188"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(7852), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 13L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = new Guid("09cbc571-8f8d-4554-ad8e-9ad706d287c8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(7879), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 13L,
                            RoleId = 2L
                        },
                        new
                        {
                            Id = new Guid("a2a027f2-9144-441e-b4cf-0ba0544c90f0"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(7905), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 13L,
                            RoleId = 3L
                        },
                        new
                        {
                            Id = new Guid("576aa95d-0af6-40da-8c93-18d4647431ae"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(8201), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 14L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = new Guid("369f0617-b105-4152-9420-165bfd9729c9"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(8228), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 14L,
                            RoleId = 2L
                        },
                        new
                        {
                            Id = new Guid("e32d536c-652b-4a8e-8b0e-c4016091fbc0"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(8254), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 14L,
                            RoleId = 3L
                        },
                        new
                        {
                            Id = new Guid("c7a09edc-8fc3-4e6f-8093-7190bcc338d9"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(8549), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 15L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = new Guid("5d2c16e7-4f45-485a-a88e-092e3fc9feba"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(8580), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 15L,
                            RoleId = 2L
                        },
                        new
                        {
                            Id = new Guid("7326bdae-4e36-4662-9ce8-3247cd18c9ae"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(8819), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 16L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = new Guid("e8a83d22-25b0-48f1-b238-e3157b7f39ff"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(9102), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 17L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = new Guid("2bcb2b55-149c-4eee-a61e-5219ed64f4db"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(9351), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 18L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = new Guid("dab100cf-98b0-4f4b-aab1-7b2b891a22ee"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 14, 14, 57, 2, 694, DateTimeKind.Unspecified).AddTicks(9378), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 18L,
                            RoleId = 2L
                        });
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Position", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", "Auth");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ConcurrencyStamp = "ad93aebb-c404-4bf3-b3e6-b46c856c5aa5",
                            Name = "CompanyAdmin"
                        },
                        new
                        {
                            Id = 2L,
                            ConcurrencyStamp = "a489f96f-04aa-47eb-be18-8b3112cc3902",
                            Name = "CompanyAdminDeputy"
                        },
                        new
                        {
                            Id = 3L,
                            ConcurrencyStamp = "57d1e893-49e5-4df9-9f1d-6eeabc06ef72",
                            Name = "Specialist"
                        });
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Auth");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Service", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("BusinessArea")
                        .HasColumnType("bigint")
                        .HasColumnName("BusinessAreaId");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BusinessArea");

                    b.HasIndex("CompanyId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.ServiceEmployee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceEmployees");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<long?>("Gender")
                        .HasColumnType("bigint")
                        .HasColumnName("GenderId");

                    b.Property<string>("Information")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<long?>("PositionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Specialization")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Gender");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PositionId");

                    b.ToTable("Users", "Auth");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Auth");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "Auth");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", "Auth");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.UserToken", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Auth");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.WorkSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DayType")
                        .HasColumnType("bigint")
                        .HasColumnName("DayTypeId");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("StartingWorkAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("WeekendType")
                        .HasColumnType("bigint")
                        .HasColumnName("WeekendTypeId");

                    b.Property<int>("WorkingHoursFrom")
                        .HasColumnType("integer");

                    b.Property<int>("WorkingHoursTo")
                        .HasColumnType("integer");

                    b.Property<int>("WorkingMinutesFrom")
                        .HasColumnType("integer");

                    b.Property<int>("WorkingMinutesTo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DayType");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WeekendType");

                    b.ToTable("WorkSchedules");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Enums.BusinessAreaEntity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("BusinessAreaId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("BusinessAreas");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Beauty Salon",
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Barber Shop",
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Private Employee",
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Kids Hairdresser",
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            Name = "SPA",
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Tattoo",
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Cosmetology",
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Eyebrows And Eyelashes",
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 9L,
                            Name = "Nail Service",
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            Name = "Waxing",
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 11L,
                            Name = "Other Beauty Services",
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 12L,
                            Name = "Other Beauty Business",
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 13L,
                            Name = "Medical Center",
                            ParentId = 2L
                        },
                        new
                        {
                            Id = 14L,
                            Name = "Dentist",
                            ParentId = 2L
                        },
                        new
                        {
                            Id = 15L,
                            Name = "Vet Clinic",
                            ParentId = 2L
                        },
                        new
                        {
                            Id = 16L,
                            Name = "Analysis",
                            ParentId = 2L
                        },
                        new
                        {
                            Id = 17L,
                            Name = "Psychotherapy And Psychology",
                            ParentId = 2L
                        },
                        new
                        {
                            Id = 18L,
                            Name = "Alternative Medicine",
                            ParentId = 2L
                        },
                        new
                        {
                            Id = 19L,
                            Name = "Hospital",
                            ParentId = 2L
                        },
                        new
                        {
                            Id = 20L,
                            Name = "Polyclinic",
                            ParentId = 2L
                        },
                        new
                        {
                            Id = 21L,
                            Name = "Diagnostic Center",
                            ParentId = 2L
                        },
                        new
                        {
                            Id = 22L,
                            Name = "Women's Consultation",
                            ParentId = 2L
                        },
                        new
                        {
                            Id = 23L,
                            Name = "Wellness Massage",
                            ParentId = 2L
                        },
                        new
                        {
                            Id = 24L,
                            Name = "Other Medical Business",
                            ParentId = 2L
                        },
                        new
                        {
                            Id = 25L,
                            Name = "Fitness Club",
                            ParentId = 3L
                        },
                        new
                        {
                            Id = 26L,
                            Name = "Sport School",
                            ParentId = 3L
                        },
                        new
                        {
                            Id = 27L,
                            Name = "Dance School",
                            ParentId = 3L
                        },
                        new
                        {
                            Id = 28L,
                            Name = "Tennis And Squash",
                            ParentId = 3L
                        },
                        new
                        {
                            Id = 29L,
                            Name = "Swimming Pool",
                            ParentId = 3L
                        },
                        new
                        {
                            Id = 30L,
                            Name = "Trampoline Center",
                            ParentId = 3L
                        },
                        new
                        {
                            Id = 31L,
                            Name = "EMS",
                            ParentId = 3L
                        },
                        new
                        {
                            Id = 32L,
                            Name = "Personal Coach",
                            ParentId = 3L
                        },
                        new
                        {
                            Id = 33L,
                            Name = "Yoga",
                            ParentId = 3L
                        },
                        new
                        {
                            Id = 34L,
                            Name = "Private Services",
                            ParentId = 3L
                        },
                        new
                        {
                            Id = 35L,
                            Name = "Other Sport",
                            ParentId = 3L
                        },
                        new
                        {
                            Id = 36L,
                            Name = "Multidisciplinary Courses",
                            ParentId = 4L
                        },
                        new
                        {
                            Id = 37L,
                            Name = "Kids Workshop",
                            ParentId = 4L
                        },
                        new
                        {
                            Id = 38L,
                            Name = "Language School",
                            ParentId = 4L
                        },
                        new
                        {
                            Id = 39L,
                            Name = "School of Music",
                            ParentId = 4L
                        },
                        new
                        {
                            Id = 40L,
                            Name = "Test Preparation",
                            ParentId = 4L
                        },
                        new
                        {
                            Id = 41L,
                            Name = "Driving School",
                            ParentId = 4L
                        },
                        new
                        {
                            Id = 42L,
                            Name = "Other Education",
                            ParentId = 4L
                        },
                        new
                        {
                            Id = 43L,
                            Name = "Sauna",
                            ParentId = 5L
                        },
                        new
                        {
                            Id = 44L,
                            Name = "Bowling",
                            ParentId = 5L
                        },
                        new
                        {
                            Id = 45L,
                            Name = "Cyber Sport",
                            ParentId = 5L
                        },
                        new
                        {
                            Id = 46L,
                            Name = "Quest",
                            ParentId = 5L
                        },
                        new
                        {
                            Id = 47L,
                            Name = "Restaurant",
                            ParentId = 5L
                        },
                        new
                        {
                            Id = 48L,
                            Name = "Massage Salon",
                            ParentId = 5L
                        },
                        new
                        {
                            Id = 49L,
                            Name = "Karting",
                            ParentId = 5L
                        },
                        new
                        {
                            Id = 50L,
                            Name = "Other Entertainment",
                            ParentId = 5L
                        },
                        new
                        {
                            Id = 51L,
                            Name = "Photo Studio",
                            ParentId = 6L
                        },
                        new
                        {
                            Id = 52L,
                            Name = "Atelier",
                            ParentId = 6L
                        },
                        new
                        {
                            Id = 53L,
                            Name = "Dry Cleaning",
                            ParentId = 6L
                        },
                        new
                        {
                            Id = 54L,
                            Name = "Cleaning",
                            ParentId = 6L
                        },
                        new
                        {
                            Id = 55L,
                            Name = "Equipment Repair",
                            ParentId = 6L
                        },
                        new
                        {
                            Id = 56L,
                            Name = "Zoo Services",
                            ParentId = 6L
                        },
                        new
                        {
                            Id = 57L,
                            Name = "Equipment Rental",
                            ParentId = 6L
                        },
                        new
                        {
                            Id = 58L,
                            Name = "Other Household Services",
                            ParentId = 6L
                        },
                        new
                        {
                            Id = 59L,
                            Name = "Car Wash",
                            ParentId = 7L
                        },
                        new
                        {
                            Id = 60L,
                            Name = "Auto Body Shop",
                            ParentId = 7L
                        },
                        new
                        {
                            Id = 61L,
                            Name = "Car Showroom",
                            ParentId = 7L
                        },
                        new
                        {
                            Id = 62L,
                            Name = "Tuning Center",
                            ParentId = 7L
                        },
                        new
                        {
                            Id = 63L,
                            Name = "Vehicle Inspection",
                            ParentId = 7L
                        },
                        new
                        {
                            Id = 64L,
                            Name = "Detailing Center",
                            ParentId = 7L
                        },
                        new
                        {
                            Id = 65L,
                            Name = "Private Mechanic",
                            ParentId = 7L
                        },
                        new
                        {
                            Id = 66L,
                            Name = "Tyre Shop",
                            ParentId = 7L
                        },
                        new
                        {
                            Id = 67L,
                            Name = "Car Rental",
                            ParentId = 7L
                        },
                        new
                        {
                            Id = 68L,
                            Name = "Another Auto Business",
                            ParentId = 7L
                        },
                        new
                        {
                            Id = 69L,
                            Name = "Optics Salon",
                            ParentId = 8L
                        },
                        new
                        {
                            Id = 70L,
                            Name = "Cosmetics Store",
                            ParentId = 8L
                        },
                        new
                        {
                            Id = 71L,
                            Name = "Furniture And Interior",
                            ParentId = 8L
                        },
                        new
                        {
                            Id = 72L,
                            Name = "Food Store",
                            ParentId = 8L
                        },
                        new
                        {
                            Id = 73L,
                            Name = "Book Store",
                            ParentId = 8L
                        },
                        new
                        {
                            Id = 74L,
                            Name = "Shopping Center",
                            ParentId = 8L
                        },
                        new
                        {
                            Id = 75L,
                            Name = "Boutique And Showroom",
                            ParentId = 8L
                        },
                        new
                        {
                            Id = 76L,
                            Name = "Wedding Salon",
                            ParentId = 8L
                        },
                        new
                        {
                            Id = 77L,
                            Name = "Other Retail",
                            ParentId = 8L
                        },
                        new
                        {
                            Id = 78L,
                            Name = "Notary",
                            ParentId = 9L
                        },
                        new
                        {
                            Id = 81L,
                            Name = "Law Firm",
                            ParentId = 9L
                        },
                        new
                        {
                            Id = 79L,
                            Name = "Accounting And Auditing",
                            ParentId = 9L
                        },
                        new
                        {
                            Id = 80L,
                            Name = "Event Management",
                            ParentId = 9L
                        },
                        new
                        {
                            Id = 82L,
                            Name = "RealEstate",
                            ParentId = 9L
                        },
                        new
                        {
                            Id = 83L,
                            Name = "Self-employed Specialist",
                            ParentId = 0L
                        });
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Enums.BusinessTypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("BusinessTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Beauty",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Healthcare",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Sport",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Education",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Entertainment",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 6L,
                            Name = "HouseholdServices",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Auto",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Retail",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 9L,
                            Name = "Other",
                            ParentId = 0L
                        });
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Enums.ClientCategoryEntity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ClientCategoryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ClientCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Loyal",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Permanent",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 3L,
                            Name = "VIP",
                            ParentId = 0L
                        });
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Enums.CompanyTypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("CompanyTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("CompanyTypes");

                    b.HasData(
                        new
                        {
                            Id = 0L,
                            Name = "Juridical Person",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 1L,
                            Name = "Physical Person",
                            ParentId = 0L
                        });
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Enums.DayTypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("DayTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("DayTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Work Day",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Weekend",
                            ParentId = 0L
                        });
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Enums.EmployeesSizeEntity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("EmployeesSizeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("SizeOfEmployees");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "1",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 2L,
                            Name = "2-5",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 3L,
                            Name = "6-10",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 4L,
                            Name = "11-20",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 5L,
                            Name = "21+",
                            ParentId = 0L
                        });
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Enums.GenderEntity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("GenderId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Male",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Female",
                            ParentId = 0L
                        });
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Enums.PolicyEntity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("PolicyId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Policies");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "CanViewEmployees",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 2L,
                            Name = "CanManageEmployees",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 3L,
                            Name = "CanAddEmployee",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 4L,
                            Name = "CanChangeEmployeeWorkSchedule",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 5L,
                            Name = "CanManagePositions",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 6L,
                            Name = "CanViewClients",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 7L,
                            Name = "CanManageClients",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 8L,
                            Name = "CanAddService",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 9L,
                            Name = "CanEditService",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 10L,
                            Name = "CanDeleteService",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 11L,
                            Name = "CanViewOtherPeoplesBookings",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 12L,
                            Name = "CanCreateBooking",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 13L,
                            Name = "CanAmendBooking",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 14L,
                            Name = "CanRemoveBooking",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 15L,
                            Name = "CanAmendOtherEmployeesBookings",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 16L,
                            Name = "CanEditRoles",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 17L,
                            Name = "CanManageRolePolicies",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 18L,
                            Name = "CanEditCompanyInfo",
                            ParentId = 0L
                        });
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Enums.WeekendTypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("WeekendTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("WeekendTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Sick",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Leave",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Paid Holiday",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Unpaid Holiday",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Standard Weekend (SAT/SUN)",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Absence",
                            ParentId = 0L
                        });
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Booking", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.Client", "Client")
                        .WithMany("Bookings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.Service", "Service")
                        .WithMany("Bookings")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.User", "Specialist")
                        .WithMany("AssignedBookings")
                        .HasForeignKey("SpecialistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Service");

                    b.Navigation("Specialist");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Client", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Enums.ClientCategoryEntity", null)
                        .WithMany()
                        .HasForeignKey("ClientCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.Company", "Company")
                        .WithMany("Clients")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Enums.GenderEntity", null)
                        .WithMany()
                        .HasForeignKey("Gender");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Company", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Enums.BusinessTypeEntity", null)
                        .WithMany()
                        .HasForeignKey("BusinessType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Enums.CompanyTypeEntity", null)
                        .WithMany()
                        .HasForeignKey("CompanyType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Enums.EmployeesSizeEntity", null)
                        .WithMany()
                        .HasForeignKey("EmployeesSize")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.CompanyBusinessArea", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Enums.BusinessAreaEntity", null)
                        .WithMany()
                        .HasForeignKey("BusinessArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.Company", "Company")
                        .WithMany("CompanyBusinessAreas")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.PolicyRole", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Enums.PolicyEntity", null)
                        .WithMany()
                        .HasForeignKey("Policy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.Role", null)
                        .WithMany("PolicyRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Position", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.RoleClaim", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Service", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Enums.BusinessAreaEntity", null)
                        .WithMany()
                        .HasForeignKey("BusinessArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.Company", "Company")
                        .WithMany("Services")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.ServiceEmployee", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.User", "Employee")
                        .WithMany("ServiceEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.Service", "Service")
                        .WithMany("ServiceEmployees")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.User", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId");

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Enums.GenderEntity", null)
                        .WithMany()
                        .HasForeignKey("Gender");

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId");

                    b.Navigation("Company");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.UserClaim", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.UserLogin", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.UserToken", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.WorkSchedule", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Enums.DayTypeEntity", null)
                        .WithMany()
                        .HasForeignKey("DayType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.User", "Employee")
                        .WithMany("WorkSchedules")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Enums.WeekendTypeEntity", null)
                        .WithMany()
                        .HasForeignKey("WeekendType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Client", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Company", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("CompanyBusinessAreas");

                    b.Navigation("Employees");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Position", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Role", b =>
                {
                    b.Navigation("PolicyRoles");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Service", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("ServiceEmployees");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.User", b =>
                {
                    b.Navigation("AssignedBookings");

                    b.Navigation("ServiceEmployees");

                    b.Navigation("WorkSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
