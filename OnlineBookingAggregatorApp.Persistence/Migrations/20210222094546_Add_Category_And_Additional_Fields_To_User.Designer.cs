// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OnlineBookingAggregatorApp.Persistence.Data;

namespace OnlineBookingAggregatorApp.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210222094546_Add_Category_And_Additional_Fields_To_User")]
    partial class Add_Category_And_Additional_Fields_To_User
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Booking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("DateFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<long>("SpecialistId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SpecialistId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("BusinessArea")
                        .HasColumnType("bigint")
                        .HasColumnName("BusinessAreaId");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("ServiceTargetGroup")
                        .HasColumnType("bigint")
                        .HasDefaultValue(3L)
                        .HasColumnName("ServiceTargetGroupId");

                    b.HasKey("Id");

                    b.HasIndex("BusinessArea");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ServiceTargetGroup");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("AdditionalPhoneNumber")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<long>("ClientCategory")
                        .HasColumnType("bigint")
                        .HasColumnName("ClientCategoryId");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long?>("Gender")
                        .HasColumnType("bigint")
                        .HasColumnName("GenderId");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("ClientCategory");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Gender");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("BusinessType")
                        .HasColumnType("bigint")
                        .HasColumnName("BusinessTypeId");

                    b.Property<long>("CompanyType")
                        .HasColumnType("bigint")
                        .HasColumnName("CompanyTypeId");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("EmployeesSize")
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L)
                        .HasColumnName("EmployeesSizeId");

                    b.Property<string>("LogoPath")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessType");

                    b.HasIndex("CompanyType");

                    b.HasIndex("EmployeesSize");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.CompanyBusinessArea", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("BusinessArea")
                        .HasColumnType("bigint")
                        .HasColumnName("BusinessAreaId");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BusinessArea");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyBusinessAreas");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.PolicyRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("Policy")
                        .HasColumnType("bigint")
                        .HasColumnName("PolicyId");

                    b.Property<long>("Role")
                        .HasColumnType("bigint")
                        .HasColumnName("SystemRoleId");

                    b.HasKey("Id");

                    b.HasIndex("Policy");

                    b.HasIndex("Role");

                    b.ToTable("PolicyRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6fc680d9-9390-4d95-ac7c-0f740f2a9bf1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 633, DateTimeKind.Unspecified).AddTicks(7372), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 1L,
                            Role = 1L
                        },
                        new
                        {
                            Id = new Guid("803e1d53-bd8d-437e-bd65-019e0cd3e0fe"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 633, DateTimeKind.Unspecified).AddTicks(8995), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 1L,
                            Role = 2L
                        },
                        new
                        {
                            Id = new Guid("20b27a9c-9af5-4c70-8e9c-127e50d4cc16"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(143), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 2L,
                            Role = 1L
                        },
                        new
                        {
                            Id = new Guid("00bd6a45-cbca-472a-88a3-b3e4e50d624c"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(175), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 2L,
                            Role = 2L
                        },
                        new
                        {
                            Id = new Guid("7c2b1847-1e88-4feb-87a2-82cd9d1449b5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(523), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 3L,
                            Role = 1L
                        },
                        new
                        {
                            Id = new Guid("85967994-0136-4f34-b4ff-aad2d36be5db"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(826), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 4L,
                            Role = 1L
                        },
                        new
                        {
                            Id = new Guid("da40ff6f-5a71-4acc-95dd-a22d3b12b12f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(853), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 4L,
                            Role = 3L
                        },
                        new
                        {
                            Id = new Guid("6655948f-45db-4556-a572-e5cf7f3b794e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(878), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 4L,
                            Role = 2L
                        },
                        new
                        {
                            Id = new Guid("42a33959-996d-4074-bd6a-ba7428298641"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(1228), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 5L,
                            Role = 1L
                        },
                        new
                        {
                            Id = new Guid("ae7c4d5f-72e8-4d98-ab3d-64b6c4513814"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(1259), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 5L,
                            Role = 2L
                        },
                        new
                        {
                            Id = new Guid("6386aab7-9a63-48eb-aef1-179e2db7138d"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(1536), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 6L,
                            Role = 1L
                        },
                        new
                        {
                            Id = new Guid("7ee17695-cb71-4a41-80f7-9afd355be516"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(1562), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 6L,
                            Role = 2L
                        },
                        new
                        {
                            Id = new Guid("d29af634-0c11-48bb-895a-e4de2c67965d"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(1588), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 6L,
                            Role = 3L
                        },
                        new
                        {
                            Id = new Guid("c00962b7-a2aa-42df-ab25-62ec0bcaf7cf"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(1836), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 7L,
                            Role = 1L
                        },
                        new
                        {
                            Id = new Guid("c68cfd7d-874d-4e52-bb6e-fc2ef536a46a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(1863), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 7L,
                            Role = 2L
                        },
                        new
                        {
                            Id = new Guid("d145541b-e97c-42de-b4b4-b5c496b4f62a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(2106), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 8L,
                            Role = 1L
                        },
                        new
                        {
                            Id = new Guid("db17966f-66d0-4a72-b46b-31a9515a01a2"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(2132), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 8L,
                            Role = 2L
                        },
                        new
                        {
                            Id = new Guid("a44c2133-98f7-4dcb-a10d-81504edf8083"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(2523), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 9L,
                            Role = 1L
                        },
                        new
                        {
                            Id = new Guid("4a0df0db-c489-4353-b05d-c43138b4a3f7"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(2550), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 9L,
                            Role = 2L
                        },
                        new
                        {
                            Id = new Guid("6c76dd56-deec-4a23-80fe-be909b0024f1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(2576), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 9L,
                            Role = 3L
                        },
                        new
                        {
                            Id = new Guid("34b12e2d-8627-4347-9b7c-4349148c8752"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(2822), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 10L,
                            Role = 1L
                        },
                        new
                        {
                            Id = new Guid("30d42d53-4567-47ce-9bad-5a62166fb9cb"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(3068), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 11L,
                            Role = 1L
                        },
                        new
                        {
                            Id = new Guid("aa19ca44-bc9f-4ef2-bd7f-07bc137f77a4"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(3094), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 11L,
                            Role = 2L
                        },
                        new
                        {
                            Id = new Guid("42840bfc-9eb2-4af8-8a9f-39657ff99d47"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(3373), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 12L,
                            Role = 1L
                        },
                        new
                        {
                            Id = new Guid("7ba76a67-4a10-4c7a-ab8e-0cf1083ae45b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(3399), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 12L,
                            Role = 2L
                        },
                        new
                        {
                            Id = new Guid("cd56f9e2-2d35-428c-8b25-d3e4890813fb"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(3425), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 12L,
                            Role = 3L
                        },
                        new
                        {
                            Id = new Guid("9c0b85e1-dcbf-4e85-b2b6-9247d0576051"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(3711), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 13L,
                            Role = 1L
                        },
                        new
                        {
                            Id = new Guid("e12d6f30-93fc-48e5-9b97-c7fb7f34f725"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(3738), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 13L,
                            Role = 2L
                        },
                        new
                        {
                            Id = new Guid("fae12d8e-839d-4bf7-b02f-7474c7e9fd32"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(3764), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 13L,
                            Role = 3L
                        },
                        new
                        {
                            Id = new Guid("950d4af4-34ad-408c-876b-ce53699d9b51"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(4016), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 14L,
                            Role = 1L
                        },
                        new
                        {
                            Id = new Guid("02ec7750-a3e5-40f7-b5e7-ae31c2a69839"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(4043), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 14L,
                            Role = 2L
                        },
                        new
                        {
                            Id = new Guid("ad83fdbb-6d60-4aa5-a0d9-75a15d8a40db"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(4068), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 14L,
                            Role = 3L
                        },
                        new
                        {
                            Id = new Guid("d8772419-4797-4267-a2c8-1e51ed71fd0a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(4360), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 15L,
                            Role = 1L
                        },
                        new
                        {
                            Id = new Guid("b334bce9-0259-4455-9fe3-e4525587d3be"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(4390), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 15L,
                            Role = 2L
                        },
                        new
                        {
                            Id = new Guid("936b274b-0114-496d-a326-19793523d37e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(4630), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 16L,
                            Role = 1L
                        },
                        new
                        {
                            Id = new Guid("b37acf33-399d-42fa-872c-d3d111ef22bf"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(4917), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 17L,
                            Role = 1L
                        },
                        new
                        {
                            Id = new Guid("2108fc8c-4ba0-45ab-9fdc-13cbba89bf8e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(5159), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 18L,
                            Role = 1L
                        },
                        new
                        {
                            Id = new Guid("2e90c1a2-e6c9-428b-9967-15bf42bc9579"),
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 2, 22, 9, 45, 45, 634, DateTimeKind.Unspecified).AddTicks(5186), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0L,
                            Policy = 18L,
                            Role = 2L
                        });
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Position", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", "Auth");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Auth");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Service", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("LogoPath")
                        .HasColumnType("text");

                    b.Property<decimal>("MaxPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MinPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.ServiceEmployee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceEmployees");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<long>("EmployeeStatus")
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L)
                        .HasColumnName("EmployeeStatusId");

                    b.Property<DateTimeOffset?>("FiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<long?>("Gender")
                        .HasColumnType("bigint")
                        .HasColumnName("GenderId");

                    b.Property<string>("Information")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset?>("OnHolidayFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("OnHolidayTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<long?>("PositionId")
                        .HasColumnType("bigint");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Specialization")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("SystemRole")
                        .HasColumnType("bigint")
                        .HasColumnName("SystemRoleId");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeStatus");

                    b.HasIndex("Gender");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PositionId");

                    b.HasIndex("SystemRole");

                    b.ToTable("Users", "Auth");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Auth");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "Auth");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", "Auth");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.UserToken", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Auth");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.WorkSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DayType")
                        .HasColumnType("bigint")
                        .HasColumnName("DayTypeId");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WeekendType")
                        .HasColumnType("bigint")
                        .HasColumnName("WeekendTypeId");

                    b.Property<int>("WorkingHoursFrom")
                        .HasColumnType("integer");

                    b.Property<int>("WorkingHoursTo")
                        .HasColumnType("integer");

                    b.Property<int>("WorkingMinutesFrom")
                        .HasColumnType("integer");

                    b.Property<int>("WorkingMinutesTo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DayType");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WeekendType");

                    b.ToTable("WorkSchedules");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Enums.BusinessAreaEntity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("BusinessAreaId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("BusinessAreas");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Beauty Salon",
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Barber Shop",
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Private Employee",
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Kids Hairdresser",
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            Name = "SPA",
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Tattoo",
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Cosmetology",
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Eyebrows And Eyelashes",
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 9L,
                            Name = "Nail Service",
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            Name = "Waxing",
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 11L,
                            Name = "Other Beauty Services",
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 12L,
                            Name = "Other Beauty Business",
                            ParentId = 1L
                        },
                        new
                        {
                            Id = 13L,
                            Name = "Medical Center",
                            ParentId = 2L
                        },
                        new
                        {
                            Id = 14L,
                            Name = "Dentist",
                            ParentId = 2L
                        },
                        new
                        {
                            Id = 15L,
                            Name = "Vet Clinic",
                            ParentId = 2L
                        },
                        new
                        {
                            Id = 16L,
                            Name = "Analysis",
                            ParentId = 2L
                        },
                        new
                        {
                            Id = 17L,
                            Name = "Psychotherapy And Psychology",
                            ParentId = 2L
                        },
                        new
                        {
                            Id = 18L,
                            Name = "Alternative Medicine",
                            ParentId = 2L
                        },
                        new
                        {
                            Id = 19L,
                            Name = "Hospital",
                            ParentId = 2L
                        },
                        new
                        {
                            Id = 20L,
                            Name = "Polyclinic",
                            ParentId = 2L
                        },
                        new
                        {
                            Id = 21L,
                            Name = "Diagnostic Center",
                            ParentId = 2L
                        },
                        new
                        {
                            Id = 22L,
                            Name = "Women's Consultation",
                            ParentId = 2L
                        },
                        new
                        {
                            Id = 23L,
                            Name = "Wellness Massage",
                            ParentId = 2L
                        },
                        new
                        {
                            Id = 24L,
                            Name = "Other Medical Business",
                            ParentId = 2L
                        },
                        new
                        {
                            Id = 25L,
                            Name = "Fitness Club",
                            ParentId = 3L
                        },
                        new
                        {
                            Id = 26L,
                            Name = "Sport School",
                            ParentId = 3L
                        },
                        new
                        {
                            Id = 27L,
                            Name = "Dance School",
                            ParentId = 3L
                        },
                        new
                        {
                            Id = 28L,
                            Name = "Tennis And Squash",
                            ParentId = 3L
                        },
                        new
                        {
                            Id = 29L,
                            Name = "Swimming Pool",
                            ParentId = 3L
                        },
                        new
                        {
                            Id = 30L,
                            Name = "Trampoline Center",
                            ParentId = 3L
                        },
                        new
                        {
                            Id = 31L,
                            Name = "EMS",
                            ParentId = 3L
                        },
                        new
                        {
                            Id = 32L,
                            Name = "Personal Coach",
                            ParentId = 3L
                        },
                        new
                        {
                            Id = 33L,
                            Name = "Yoga",
                            ParentId = 3L
                        },
                        new
                        {
                            Id = 34L,
                            Name = "Private Services",
                            ParentId = 3L
                        },
                        new
                        {
                            Id = 35L,
                            Name = "Other Sport",
                            ParentId = 3L
                        },
                        new
                        {
                            Id = 36L,
                            Name = "Multidisciplinary Courses",
                            ParentId = 4L
                        },
                        new
                        {
                            Id = 37L,
                            Name = "Kids Workshop",
                            ParentId = 4L
                        },
                        new
                        {
                            Id = 38L,
                            Name = "Language School",
                            ParentId = 4L
                        },
                        new
                        {
                            Id = 39L,
                            Name = "School of Music",
                            ParentId = 4L
                        },
                        new
                        {
                            Id = 40L,
                            Name = "Test Preparation",
                            ParentId = 4L
                        },
                        new
                        {
                            Id = 41L,
                            Name = "Driving School",
                            ParentId = 4L
                        },
                        new
                        {
                            Id = 42L,
                            Name = "Other Education",
                            ParentId = 4L
                        },
                        new
                        {
                            Id = 43L,
                            Name = "Sauna",
                            ParentId = 5L
                        },
                        new
                        {
                            Id = 44L,
                            Name = "Bowling",
                            ParentId = 5L
                        },
                        new
                        {
                            Id = 45L,
                            Name = "Cyber Sport",
                            ParentId = 5L
                        },
                        new
                        {
                            Id = 46L,
                            Name = "Quest",
                            ParentId = 5L
                        },
                        new
                        {
                            Id = 47L,
                            Name = "Restaurant",
                            ParentId = 5L
                        },
                        new
                        {
                            Id = 48L,
                            Name = "Massage Salon",
                            ParentId = 5L
                        },
                        new
                        {
                            Id = 49L,
                            Name = "Karting",
                            ParentId = 5L
                        },
                        new
                        {
                            Id = 50L,
                            Name = "Other Entertainment",
                            ParentId = 5L
                        },
                        new
                        {
                            Id = 51L,
                            Name = "Photo Studio",
                            ParentId = 6L
                        },
                        new
                        {
                            Id = 52L,
                            Name = "Atelier",
                            ParentId = 6L
                        },
                        new
                        {
                            Id = 53L,
                            Name = "Dry Cleaning",
                            ParentId = 6L
                        },
                        new
                        {
                            Id = 54L,
                            Name = "Cleaning",
                            ParentId = 6L
                        },
                        new
                        {
                            Id = 55L,
                            Name = "Equipment Repair",
                            ParentId = 6L
                        },
                        new
                        {
                            Id = 56L,
                            Name = "Zoo Services",
                            ParentId = 6L
                        },
                        new
                        {
                            Id = 57L,
                            Name = "Equipment Rental",
                            ParentId = 6L
                        },
                        new
                        {
                            Id = 58L,
                            Name = "Other Household Services",
                            ParentId = 6L
                        },
                        new
                        {
                            Id = 59L,
                            Name = "Car Wash",
                            ParentId = 7L
                        },
                        new
                        {
                            Id = 60L,
                            Name = "Auto Body Shop",
                            ParentId = 7L
                        },
                        new
                        {
                            Id = 61L,
                            Name = "Car Showroom",
                            ParentId = 7L
                        },
                        new
                        {
                            Id = 62L,
                            Name = "Tuning Center",
                            ParentId = 7L
                        },
                        new
                        {
                            Id = 63L,
                            Name = "Vehicle Inspection",
                            ParentId = 7L
                        },
                        new
                        {
                            Id = 64L,
                            Name = "Detailing Center",
                            ParentId = 7L
                        },
                        new
                        {
                            Id = 65L,
                            Name = "Private Mechanic",
                            ParentId = 7L
                        },
                        new
                        {
                            Id = 66L,
                            Name = "Tyre Shop",
                            ParentId = 7L
                        },
                        new
                        {
                            Id = 67L,
                            Name = "Car Rental",
                            ParentId = 7L
                        },
                        new
                        {
                            Id = 68L,
                            Name = "Another Auto Business",
                            ParentId = 7L
                        },
                        new
                        {
                            Id = 69L,
                            Name = "Optics Salon",
                            ParentId = 8L
                        },
                        new
                        {
                            Id = 70L,
                            Name = "Cosmetics Store",
                            ParentId = 8L
                        },
                        new
                        {
                            Id = 71L,
                            Name = "Furniture And Interior",
                            ParentId = 8L
                        },
                        new
                        {
                            Id = 72L,
                            Name = "Food Store",
                            ParentId = 8L
                        },
                        new
                        {
                            Id = 73L,
                            Name = "Book Store",
                            ParentId = 8L
                        },
                        new
                        {
                            Id = 74L,
                            Name = "Shopping Center",
                            ParentId = 8L
                        },
                        new
                        {
                            Id = 75L,
                            Name = "Boutique And Showroom",
                            ParentId = 8L
                        },
                        new
                        {
                            Id = 76L,
                            Name = "Wedding Salon",
                            ParentId = 8L
                        },
                        new
                        {
                            Id = 77L,
                            Name = "Other Retail",
                            ParentId = 8L
                        },
                        new
                        {
                            Id = 78L,
                            Name = "Notary",
                            ParentId = 9L
                        },
                        new
                        {
                            Id = 81L,
                            Name = "Law Firm",
                            ParentId = 9L
                        },
                        new
                        {
                            Id = 79L,
                            Name = "Accounting And Auditing",
                            ParentId = 9L
                        },
                        new
                        {
                            Id = 80L,
                            Name = "Event Management",
                            ParentId = 9L
                        },
                        new
                        {
                            Id = 82L,
                            Name = "RealEstate",
                            ParentId = 9L
                        },
                        new
                        {
                            Id = 83L,
                            Name = "Self-employed Specialist",
                            ParentId = 0L
                        });
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Enums.BusinessTypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("BusinessTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Beauty",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Healthcare",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Sport",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Education",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Entertainment",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 6L,
                            Name = "HouseholdServices",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Auto",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Retail",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 9L,
                            Name = "Other",
                            ParentId = 0L
                        });
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Enums.ClientCategoryEntity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ClientCategoryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ClientCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Loyal",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Permanent",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 3L,
                            Name = "VIP",
                            ParentId = 0L
                        });
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Enums.CompanyTypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("CompanyTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("CompanyTypes");

                    b.HasData(
                        new
                        {
                            Id = 0L,
                            Name = "Juridical Person",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 1L,
                            Name = "Physical Person",
                            ParentId = 0L
                        });
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Enums.DayTypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("DayTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("DayTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Work Day",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Weekend",
                            ParentId = 0L
                        });
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Enums.EmployeeStatusEntity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("EmployeeStatusId");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("EmployeeStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "An employee is currently active.",
                            Icon = "person",
                            Name = "Active",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 2L,
                            Description = "An employee is currently on holiday.",
                            Icon = "logout",
                            Name = "On Holiday",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 3L,
                            Description = "An employee is hidden for some reason.",
                            Icon = "person_outline",
                            Name = "Hidden",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 4L,
                            Description = "An employee is fired, but not removed from the system.",
                            Icon = "person_off",
                            Name = "Fired",
                            ParentId = 0L
                        });
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Enums.EmployeesSizeEntity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("EmployeesSizeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("SizeOfEmployees");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "1",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 2L,
                            Name = "2-5",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 3L,
                            Name = "6-10",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 4L,
                            Name = "11-20",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 5L,
                            Name = "21+",
                            ParentId = 0L
                        });
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Enums.GenderEntity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("GenderId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Male",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Female",
                            ParentId = 0L
                        });
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Enums.PolicyEntity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("PolicyId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Policies");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "CanViewEmployees",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 2L,
                            Name = "CanManageEmployees",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 3L,
                            Name = "CanAddEmployee",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 4L,
                            Name = "CanChangeEmployeeWorkSchedule",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 5L,
                            Name = "CanManagePositions",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 6L,
                            Name = "CanViewClients",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 7L,
                            Name = "CanManageClients",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 8L,
                            Name = "CanAddService",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 9L,
                            Name = "CanEditService",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 10L,
                            Name = "CanDeleteService",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 11L,
                            Name = "CanViewOtherPeoplesBookings",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 12L,
                            Name = "CanCreateBooking",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 13L,
                            Name = "CanAmendBooking",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 14L,
                            Name = "CanRemoveBooking",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 15L,
                            Name = "CanAmendOtherEmployeesBookings",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 16L,
                            Name = "CanEditRoles",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 17L,
                            Name = "CanManageRolePolicies",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 18L,
                            Name = "CanEditCompanyInfo",
                            ParentId = 0L
                        });
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Enums.ServiceTargetGroupEntity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ServiceTargetGroupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("TargetGroups");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Men's",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Women's",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 3L,
                            Name = "General",
                            ParentId = 0L
                        });
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Enums.SystemRoleEntity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("SystemRoleId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("SystemRoles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "CompanyAdmin",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 2L,
                            Name = "CompanyAdminDeputy",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Specialist",
                            ParentId = 0L
                        });
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Enums.WeekendTypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("WeekendTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("WeekendTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Sick",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Leave",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Paid Holiday",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Unpaid Holiday",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Standard Weekend (SAT/SUN)",
                            ParentId = 0L
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Absence",
                            ParentId = 0L
                        });
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Booking", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.User", "Specialist")
                        .WithMany()
                        .HasForeignKey("SpecialistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Service");

                    b.Navigation("Specialist");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Category", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Enums.BusinessAreaEntity", null)
                        .WithMany()
                        .HasForeignKey("BusinessArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Enums.ServiceTargetGroupEntity", null)
                        .WithMany()
                        .HasForeignKey("ServiceTargetGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Client", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Enums.ClientCategoryEntity", null)
                        .WithMany()
                        .HasForeignKey("ClientCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.Company", "Company")
                        .WithMany("Clients")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Enums.GenderEntity", null)
                        .WithMany()
                        .HasForeignKey("Gender");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Company", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Enums.BusinessTypeEntity", null)
                        .WithMany()
                        .HasForeignKey("BusinessType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Enums.CompanyTypeEntity", null)
                        .WithMany()
                        .HasForeignKey("CompanyType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Enums.EmployeesSizeEntity", null)
                        .WithMany()
                        .HasForeignKey("EmployeesSize")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.CompanyBusinessArea", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Enums.BusinessAreaEntity", null)
                        .WithMany()
                        .HasForeignKey("BusinessArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.Company", "Company")
                        .WithMany("CompanyBusinessAreas")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.PolicyRole", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Enums.PolicyEntity", null)
                        .WithMany()
                        .HasForeignKey("Policy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Enums.SystemRoleEntity", null)
                        .WithMany()
                        .HasForeignKey("Role")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Position", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.RoleClaim", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Service", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.ServiceEmployee", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.User", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.User", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId");

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Enums.EmployeeStatusEntity", null)
                        .WithMany()
                        .HasForeignKey("EmployeeStatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Enums.GenderEntity", null)
                        .WithMany()
                        .HasForeignKey("Gender");

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId");

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Enums.SystemRoleEntity", null)
                        .WithMany()
                        .HasForeignKey("SystemRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.UserClaim", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.UserLogin", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.UserToken", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.WorkSchedule", b =>
                {
                    b.HasOne("OnlineBookingAggregatorApp.Domain.Enums.DayTypeEntity", null)
                        .WithMany()
                        .HasForeignKey("DayType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Entities.User", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBookingAggregatorApp.Domain.Enums.WeekendTypeEntity", null)
                        .WithMany()
                        .HasForeignKey("WeekendType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Company", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("CompanyBusinessAreas");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("OnlineBookingAggregatorApp.Domain.Entities.Position", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
